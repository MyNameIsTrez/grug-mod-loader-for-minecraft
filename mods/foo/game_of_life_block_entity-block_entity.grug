start_pos: id = get_block_pos_of_block_entity(me)
start_x: i32 = get_block_pos_x(start_pos)
start_y: i32 = get_block_pos_y(start_pos) - 2
start_z: i32 = get_block_pos_z(start_pos)

g_level: id = get_block_entity_level(me)

white_concrete: id = get_default_block_state(block(resource_location("white_concrete")))
gray_concrete: id = get_default_block_state(block(resource_location("gray_concrete")))
red_concrete: id = get_default_block_state(block(resource_location("red_concrete")))
orange_concrete: id = get_default_block_state(block(resource_location("orange_concrete")))
yellow_concrete: id = get_default_block_state(block(resource_location("yellow_concrete")))
lime_concrete: id = get_default_block_state(block(resource_location("lime_concrete")))
green_concrete: id = get_default_block_state(block(resource_location("green_concrete")))
cyan_concrete: id = get_default_block_state(block(resource_location("cyan_concrete")))
light_blue_concrete: id = get_default_block_state(block(resource_location("light_blue_concrete")))
blue_concrete: id = get_default_block_state(block(resource_location("blue_concrete")))
purple_concrete: id = get_default_block_state(block(resource_location("purple_concrete")))
magenta_concrete: id = get_default_block_state(block(resource_location("magenta_concrete")))
pink_concrete: id = get_default_block_state(block(resource_location("pink_concrete")))

max_age: i32 = 11

flag: i32 = block_flag_update_all()

radius: i32 = 15
min_x: i32 = start_x - radius
max_x: i32 = start_x + radius
min_z: i32 = start_z - radius
max_z: i32 = start_z + radius

current: id = hash_set()
scanned: id = hash_set()
next: id = hash_set()

blocks: id = hash_map()

running: bool = true
# ticks: i32 = 0

on_spawn() {
    helper_clear_area()
    helper_spawn_border()

    # helper_spawn_glider()
    helper_spawn_r_pentomino()
}

on_tick() {
    if not running {
        return
    }

    # ticks = ticks + 1
    # if ticks > 20 {
    #     return
    # }
    # if ticks % 40 != 0 {
    #     return
    # }

    update: i32 = 0
    while update < 1 {
        helper_update()
        update = update + 1
    }
}

on_neighbor_changed(block_state: id, level: id, block_pos: id, block_in: id, from_block_pos: id, is_moving: bool) {
    running = not running

    if running {
        hash_set_clear(current)
        hash_map_clear(blocks)

        helper_clear_area()
        helper_spawn_border()

        # helper_spawn_glider()
        helper_spawn_r_pentomino()

        # ticks = 0
    }
}

helper_clear_area() {
    x: i32 = min_x
    while x <= max_x {
        z: i32 = min_z
        while z <= max_z {
            pos: id = block_pos(x, start_y, z)
            remove_block(pos, g_level)
            z = z + 1
        }
        x = x + 1
    }
}

helper_spawn_border() {
    x: i32 = min_x - 1
    while x <= max_x + 1 {
        # Top edge
        pos: id = block_pos(x, start_y, min_z - 1)
        place_block(gray_concrete, pos, flag, g_level)

        # Bottom edge
        pos = block_pos(x, start_y, max_z + 1)
        place_block(gray_concrete, pos, flag, g_level)

        x = x + 1
    }

    z: i32 = min_z
    while z <= max_z {
        # Left edge
        pos = block_pos(min_x - 1, start_y, z)
        place_block(gray_concrete, pos, flag, g_level)

        # Right edge
        pos = block_pos(max_x + 1, start_y, z)
        place_block(gray_concrete, pos, flag, g_level)

        z = z + 1
    }
}

# Spawns the glider pattern of blocks:
#  @
#   @
# @@@
# helper_spawn_glider() {
#     helper_place_offset_block(0, -1)
#     helper_place_offset_block(1, 0)
#     helper_place_offset_block(1, 1)
#     helper_place_offset_block(0, 1)
#     helper_place_offset_block(-1, 1)
#     helper_place_blocks()
# }

# Spawns the R-pentonimo pattern of blocks:
#  @@
# @@
#  @
helper_spawn_r_pentomino() {
    helper_place_offset_block(0, -1)
    helper_place_offset_block(1, -1)
    helper_place_offset_block(-1, 0)
    helper_place_offset_block(0, 0)
    helper_place_offset_block(0, 1)
    helper_place_blocks()
}

helper_place_offset_block(x: i32, z: i32) {
    pos: id = block_pos(start_x + x, start_y, start_z + z)
    place_block(white_concrete, pos, flag, g_level)
    hash_set_add(current, pos)
    hash_map_put(blocks, pos, box_i32(0))
}

helper_place_blocks() {
    iter: id = iterator(blocks)
    while iterating(iter) {
        entry: id = iteration(iter)
        pos: id = entry_key(entry)
        age: i32 = unbox_i32(entry_value(entry))

        if age <= max_age {
            entry_set_value(entry, box_i32(age + 1))
            place_block(helper_get_block(age), pos, flag, g_level)
        } else {
            iterator_remove(iter)
            remove_block(pos, g_level)
        }
    }
}

helper_get_block(age: i32) id {
    if age == 0 {
        return white_concrete
    } else if age == 1 {
        return red_concrete
    } else if age == 2 {
        return orange_concrete
    } else if age == 3 {
        return yellow_concrete
    } else if age == 4 {
        return lime_concrete
    } else if age == 5 {
        return green_concrete
    } else if age == 6 {
        return cyan_concrete
    } else if age == 7 {
        return light_blue_concrete
    } else if age == 8 {
        return blue_concrete
    } else if age == 9 {
        return purple_concrete
    } else if age == 10 {
        return magenta_concrete
    }
    return pink_concrete
}

helper_update() {
    helper_scan()
    helper_update_next()
    helper_place_blocks()
    hash_set_copy(next, current)
}

helper_scan() {
    hash_set_clear(scanned)

    iter: id = iterator(current)
    while iterating(iter) {
        pos: id = iteration(iter)
        helper_add_scanned(pos)
    }
}

helper_add_scanned(pos: id) {
    x: i32 = -1
    while x <= 1 {
        z: i32 = -1
        while z <= 1 {
            hash_set_add(scanned, helper_get_pos(pos, x, z))
            z = z + 1
        }
        x = x + 1
    }
}

helper_update_next() {
    hash_set_clear(next)

    iter: id = iterator(scanned)
    while iterating(iter) {
        pos: id = iteration(iter)

        count: i32 = helper_count_neighbors(pos)

        if count == 3 or (count == 2 and hash_set_has(current, pos)) {
            hash_set_add(next, pos)
            hash_map_put(blocks, pos, box_i32(0))
        }
    }
}

helper_count_neighbors(pos: id) i32 {
    count: i32 = 0

    x: i32 = -1
    while x <= 1 {
        z: i32 = -1
        while z <= 1 {
            if not (x == 0 and z == 0) {
                if hash_set_has(current, helper_get_pos(pos, x, z)) {
                    count = count + 1
                }
            }
            z = z + 1
        }
        x = x + 1
    }

    return count
}

helper_get_pos(pos: id, x: i32, z: i32) id {
    x = get_block_pos_x(pos) + x
    z = get_block_pos_z(pos) + z

    if x < min_x {
        x = max_x
    } else if x > max_x {
        x = min_x
    }

    if z < min_z {
        z = max_z
    } else if z > max_z {
        z = min_z
    }

    return block_pos(x, start_y, z)
}
