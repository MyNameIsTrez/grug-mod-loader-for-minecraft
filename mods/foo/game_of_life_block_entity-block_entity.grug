start_pos: id = get_world_position_of_block_entity(me)
start_x: i32 = get_block_pos_x(start_pos)
start_y: i32 = get_block_pos_y(start_pos) - 2
start_z: i32 = get_block_pos_z(start_pos)

g_level: id = get_block_entity_level(me)

white_concrete: id = get_default_block_state(block(resource_location("white_concrete")))
orange_concrete: id = get_default_block_state(block(resource_location("orange_concrete")))
red_concrete: id = get_default_block_state(block(resource_location("red_concrete")))

flag: i32 = block_flag_update_all()

radius: i32 = 5
min_x: i32 = start_x - radius
max_x: i32 = start_x + radius
min_z: i32 = start_z - radius
max_z: i32 = start_z + radius

current: id = hash_map()
scanned: id = hash_map()
next: id = hash_map()

running: bool = true
ticks: i32 = 0

on_spawn() {
    helper_spawn_glider()
    # helper_spawn_r_pentomino()

    # TODO: REMOVE!
    helper_scan()
    helper_update_next()
    helper_remove_current_blocks()
    helper_place_next_blocks()
    hash_map_copy(next, current)
    helper_scan()
    helper_update_next()
    helper_remove_current_blocks()
    helper_place_next_blocks()
    hash_map_copy(next, current)
    helper_scan()
    helper_update_next()
    helper_remove_current_blocks()
    helper_place_next_blocks()
    hash_map_copy(next, current)
}

# on_tick() {
#     if not running {
#         return
#     }

#     # ticks = ticks + 1
#     # if ticks > 1000 {
#     #     return
#     # }
#     # if ticks % 20 != 0 {
#     #     return
#     # }

#     update: i32 = 0
#     while update < 1 {
#         helper_update()
#         update = update + 1
#     }

#     # helper_cleanup()
#     # running = false
# }

# on_neighbor_changed(block_state: id, level: id, block_pos: id, block_in: id, from_block_pos: id, is_moving: bool) {
#     running = not running
#     if running {
#         helper_remove_current_blocks()
#         hash_map_clear(current)
#         helper_spawn_glider()
#         # helper_spawn_r_pentomino()
#     }
# }

# Spawns the glider pattern of blocks:
#  @
#   @
# @@@
helper_spawn_glider() {
    helper_place_offset_block(0, -1)
    helper_place_offset_block(1, 0)
    helper_place_offset_block(1, 1)
    helper_place_offset_block(0, 1)
    helper_place_offset_block(-1, 1)
}

# Spawns the R-pentonimo pattern of blocks:
#  @@
# @@
#  @
# helper_spawn_r_pentomino() {
#     helper_place_offset_block(0, -1)
#     helper_place_offset_block(1, -1)
#     helper_place_offset_block(-1, 0)
#     helper_place_offset_block(0, 0)
#     helper_place_offset_block(0, 1)
# }

helper_place_offset_block(x: i32, z: i32) {
    pos: id = block_pos(start_x + x, start_y, start_z + z)
    place_block(white_concrete, pos, flag, g_level)
    hash_map_put(current, pos, box_i32(0))
}

# helper_update() {
#     helper_scan()
#     helper_update_next()
#     # helper_remove_current_blocks()
#     # helper_place_next_blocks()
#     # hash_map_copy(next, current)
# }

helper_scan() {
    hash_map_clear(scanned)

    iter: id = iterator(current)
    while iterating(iter) {
        iteration: id = iteration(iter)

        age: i32 = unbox_i32(iteration_value(iteration))
        if age > 2 {
            continue
        }

        pos: id = iteration_key(iteration)

        if age == 0 {
            helper_add_scanned(pos)
        }
        hash_map_put(scanned, pos, box_i32(age + 1))
    }
}

helper_add_scanned(pos: id) {
    x: i32 = -1
    while x <= 1 {
        z: i32 = -1
        while z <= 1 {
            if not (x == 0 and z == 0) {
                neighbor: id = helper_get_pos(pos, x, z)
                if not hash_map_has_key(scanned, neighbor) {
                    hash_map_put(scanned, neighbor, box_i32(0))
                }
            }
            z = z + 1
        }
        x = x + 1
    }
}

helper_update_next() {
    hash_map_clear(next)

    iter: id = iterator(scanned)
    while iterating(iter) {
        iteration: id = iteration(iter)

        pos: id = iteration_key(iteration)

        boxed_age: id = iteration_value(iteration)
        age: i32 = unbox_i32(boxed_age)

        count: i32 = helper_count_neighbors(pos)

        if count == 3 or (count == 2 and age == 1) {
            hash_map_put(next, pos, box_i32(0))
        } else if age > 0 {
            hash_map_put(next, pos, boxed_age)
        }
    }
}

helper_count_neighbors(pos: id) i32 {
    count: i32 = 0

    x: i32 = -1
    while x <= 1 {
        z: i32 = -1
        while z <= 1 {
            if not (x == 0 and z == 0) {
                if helper_has_neighbor(pos, x, z) {
                    count = count + 1
                }
            }
            z = z + 1
        }
        x = x + 1
    }

    return count
}

helper_has_neighbor(pos: id, x: i32, z: i32) bool {
    neighbor: id = helper_get_pos(pos, x, z)

    if not hash_map_has_key(current, neighbor) {
        return false
    }
    age: id = hash_map_get(current, neighbor)
    return unbox_i32(age) == 0
}

helper_remove_current_blocks() {
    iter: id = iterator(current)
    while iterating(iter) {
        pos: id = iteration_key(iteration(iter))
        remove_block(pos, g_level)
    }
}

helper_place_next_blocks() {
    iter: id = iterator(next)
    while iterating(iter) {
        iteration: id = iteration(iter)
        age: i32 = unbox_i32(iteration_value(iteration))

        block: id = white_concrete
        if (age == 1) {
            block = orange_concrete
        } else if (age == 2) {
            block = red_concrete
        }

        pos: id = iteration_key(iteration)
        place_block(block, pos, flag, g_level)
    }
}

helper_get_pos(pos: id, x: i32, z: i32) id {
    x = get_block_pos_x(pos) + x
    z = get_block_pos_z(pos) + z

    if (x < min_x) {
        x = max_x
    } else if (x > max_x) {
        x = min_x
    }

    if (z < min_z) {
        z = max_z
    } else if (z > max_z) {
        z = min_z
    }

    return block_pos(x, start_y, z)
}

# helper_cleanup() {
#     x: i32 = -50
#     while x <= 50 {
#         z: i32 = -50
#         while z <= 50 {
#             pos: id = block_pos(start_x + x, start_y, start_z + z)
#             remove_block(pos, g_level)
#             z = z + 1
#         }
#         x = x + 1
#     }
# }
