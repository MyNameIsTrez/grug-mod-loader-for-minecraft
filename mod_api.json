{
	"entities": {
		"block": {
			"description": "A block."
		},
		"block_entity": {
			"description": "A block entity.",
            "on_functions": {
                "on_spawn": {
                    "description": "Called when the block gets placed."
                },
                "on_tick": {
                    "description": "Called every game tick, so every 0.05 seconds."
                },
                "on_neighbor_changed": {
                    "description": "Called when a neighboring block changed. An example is when a neighboring lever is toggled between the on and off state.",
					"arguments": [
						{
							"name": "block_state",
							"type": "id"
						},
						{
							"name": "level",
							"type": "id"
						},
						{
							"name": "block_pos",
							"type": "id"
						},
						{
							"name": "block_in",
							"type": "id"
						},
						{
							"name": "from_block_pos",
							"type": "id"
						},
						{
							"name": "is_moving",
							"type": "bool"
						}
					]
                }
            }
		}
	},
	"game_functions": {
		"block": {
			"description": "Creates a new block.",
			"return_type": "id",
			"arguments": [
				{
					"name": "resource_location",
					"type": "id"
				}
			]
		},
		"block_pos": {
			"description": "Creates a new block_pos.",
			"return_type": "id",
			"arguments": [
				{
					"name": "x",
					"type": "i32"
				},
				{
					"name": "y",
					"type": "i32"
				},
				{
					"name": "z",
					"type": "i32"
				}
			]
		},
		"block_flag_update_all": {
			"description": "Passed to game functions like place_block(), to notify all neighboring blocks. Consider using one of the other flags that isn't as slow.",
			"return_type": "i32"
		},
		"box_i32": {
			"description": "Wraps an i32 in an object, and returns the object's id. Use this if you need to store i32s in for example a hash_set.",
			"return_type": "id",
			"arguments": [
				{
					"name": "i32",
					"type": "i32"
				}
			]
		},
		"destroy_block": {
			"description": "Removes a block. Spawns particles of the removed block.",
			"arguments": [
				{
					"name": "block_pos",
					"type": "id"
				},
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"destroy_and_drop_block": {
			"description": "Removes a block, and drops it as an item. Spawns particles of the removed block.",
			"arguments": [
				{
					"name": "block_pos",
					"type": "id"
				},
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"entry_key": {
			"description": "Gets the key of the current entry, gotten by calling iteration(). So for a hash_map of block_pos, this returns the current loop's key.",
			"return_type": "id",
			"arguments": [
				{
					"name": "iteration",
					"type": "id"
				}
			]
		},
		"entry_set_value": {
			"description": "Sets the value of an entry. This function can't be called after iterator_remove().",
			"arguments": [
				{
					"name": "entry",
					"type": "id"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"entry_value": {
			"description": "Gets the value of the current entry, gotten by calling iteration(). So for a hash_map of block_pos, this returns the current loop's value.",
			"return_type": "id",
			"arguments": [
				{
					"name": "iteration",
					"type": "id"
				}
			]
		},
		"get_block_entity_level": {
			"description": "Gets the level (dimension) a block entity is in.",
			"return_type": "id",
			"arguments": [
				{
					"name": "block_entity_id",
					"type": "id"
				}
			]
		},
		"get_block_pos_above": {
			"description": "Gets the block position one block up.",
			"return_type": "id",
			"arguments": [
				{
					"name": "block_pos_id",
					"type": "id"
				}
			]
		},
		"get_block_pos_above_n": {
			"description": "Gets the block position N blocks up.",
			"return_type": "id",
			"arguments": [
				{
					"name": "block_pos_id",
					"type": "id"
				},
				{
					"name": "n",
					"type": "i32"
				}
			]
		},
		"get_block_pos_center": {
			"description": "Gets the center of a block position.",
			"return_type": "id",
			"arguments": [
				{
					"name": "block_pos_id",
					"type": "id"
				}
			]
		},
		"get_block_pos_x": {
			"description": "Gets the X coordinate of a block_pos.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "block_pos_id",
					"type": "id"
				}
			]
		},
		"get_block_pos_y": {
			"description": "Gets the Y coordinate of a block_pos.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "block_pos_id",
					"type": "id"
				}
			]
		},
		"get_block_pos_z": {
			"description": "Gets the Z coordinate of a block_pos.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "block_pos_id",
					"type": "id"
				}
			]
		},
		"get_block_state": {
			"description": "Gets a block_pos its state.",
			"return_type": "id",
			"arguments": [
				{
					"name": "block_pos",
					"type": "id"
				},
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"get_default_block_state": {
			"description": "Gets the default block_state of a block.",
			"return_type": "id",
			"arguments": [
				{
					"name": "block",
					"type": "id"
				}
			]
		},
		"get_hash_map_size": {
			"description": "Returns the number of ids in the hash_map.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "hash_map",
					"type": "id"
				}
			]
		},
		"get_hash_map_string": {
			"description": "Returns the string representation of the hash_map.",
			"return_type": "string",
			"arguments": [
				{
					"name": "hash_map",
					"type": "id"
				}
			]
		},
		"get_hash_set_size": {
			"description": "Returns the number of ids in the hash_set.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "hash_set",
					"type": "id"
				}
			]
		},
		"get_hash_set_string": {
			"description": "Returns the string representation of the hash_set.",
			"return_type": "string",
			"arguments": [
				{
					"name": "hash_set",
					"type": "id"
				}
			]
		},
		"get_item_name": {
			"description": "Gets the name of an item.",
			"return_type": "string",
			"arguments": [
				{
					"name": "item",
					"type": "id"
				}
			]
		},
		"get_item_entity_name": {
			"description": "Gets the name of an item_entity.",
			"return_type": "string",
			"arguments": [
				{
					"name": "item_entity",
					"type": "id"
				}
			]
		},
		"get_item_stack_name": {
			"description": "Gets the name of an item_stack.",
			"return_type": "string",
			"arguments": [
				{
					"name": "item_stack",
					"type": "id"
				}
			]
		},
		"get_level_name": {
			"description": "Gets the name of a level (dimension).",
			"return_type": "string",
			"arguments": [
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"get_resource_location_string": {
			"description": "Gets a resource_location as a string.",
			"return_type": "string",
			"arguments": [
				{
					"name": "resource_location",
					"type": "id"
				}
			]
		},
		"get_vec3_x": {
			"description": "Gets the X coordinate of a vec3.",
			"return_type": "f32",
			"arguments": [
				{
					"name": "vec3_id",
					"type": "id"
				}
			]
		},
		"get_vec3_y": {
			"description": "Gets the Y coordinate of a vec3.",
			"return_type": "f32",
			"arguments": [
				{
					"name": "vec3_id",
					"type": "id"
				}
			]
		},
		"get_vec3_z": {
			"description": "Gets the Z coordinate of a vec3.",
			"return_type": "f32",
			"arguments": [
				{
					"name": "vec3_id",
					"type": "id"
				}
			]
		},
		"get_world_position_of_block_entity": {
			"description": "Gets the world position of a block_entity.",
			"return_type": "id",
			"arguments": [
				{
					"name": "block_entity_id",
					"type": "id"
				}
			]
		},
		"hash_map": {
			"description": "Creates a new hash_map, containing id keys and id values.",
			"return_type": "id"
		},
		"hash_map_clear": {
			"description": "Clears the hash_map.",
			"arguments": [
				{
					"name": "hash_map",
					"type": "id"
				}
			]
		},
		"hash_map_copy": {
			"description": "Copies the contents of one hash_map to another.",
			"arguments": [
				{
					"name": "hash_map_from",
					"type": "id"
				},
				{
					"name": "hash_map_to",
					"type": "id"
				}
			]
		},
		"hash_map_get": {
			"description": "Returns the value that is associated with a key in the hash_map.",
			"return_type": "id",
			"arguments": [
				{
					"name": "hash_map",
					"type": "id"
				},
				{
					"name": "key",
					"type": "id"
				}
			]
		},
		"hash_map_has_key": {
			"description": "Returns whether the hash_map contains a specific key.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "hash_map",
					"type": "id"
				},
				{
					"name": "key",
					"type": "id"
				}
			]
		},
		"hash_map_put": {
			"description": "Assigns a value to a key in the hash_map.",
			"arguments": [
				{
					"name": "hash_map",
					"type": "id"
				},
				{
					"name": "key",
					"type": "id"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"hash_map_remove_key": {
			"description": "Removes a key from the hash_map, if the id is in there.",
			"arguments": [
				{
					"name": "hash_map",
					"type": "id"
				},
				{
					"name": "key",
					"type": "id"
				}
			]
		},
		"hash_set": {
			"description": "Creates a new hash_set of ids.",
			"return_type": "id"
		},
		"hash_set_add": {
			"description": "Adds an id to the hash_set, if the id is not already in there.",
			"arguments": [
				{
					"name": "hash_set",
					"type": "id"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"hash_set_clear": {
			"description": "Clears the hash_set.",
			"arguments": [
				{
					"name": "hash_set",
					"type": "id"
				}
			]
		},
		"hash_set_copy": {
			"description": "Copies the contents of one hash_set to another.",
			"arguments": [
				{
					"name": "hash_set_from",
					"type": "id"
				},
				{
					"name": "hash_set_to",
					"type": "id"
				}
			]
		},
		"hash_set_has": {
			"description": "Returns whether the hash_set contains a specific id.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "hash_set",
					"type": "id"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"hash_set_remove": {
			"description": "Removes an id from the hash_set, if the id is in there.",
			"arguments": [
				{
					"name": "hash_set",
					"type": "id"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"is_air": {
			"description": "Returns whether the block_state is air.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "block_state",
					"type": "id"
				}
			]
		},
		"is_client_side": {
			"description": "Returns whether the code is being ran on the client-side.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"item": {
			"description": "Creates a new item.",
			"return_type": "id",
			"arguments": [
				{
					"name": "resource_location",
					"type": "id"
				}
			]
		},
		"item_entity": {
			"description": "Creates a new item_entity.",
			"return_type": "id",
			"arguments": [
				{
					"name": "level",
					"type": "id"
				},
				{
					"name": "x",
					"type": "f32"
				},
				{
					"name": "y",
					"type": "f32"
				},
				{
					"name": "z",
					"type": "f32"
				},
				{
					"name": "item_stack",
					"type": "id"
				}
			]
		},
		"item_stack": {
			"description": "Creates a new item_stack.",
			"return_type": "id",
			"arguments": [
				{
					"name": "item",
					"type": "id"
				}
			]
		},
		"iterating": {
			"description": "Returns whether the iterator has more elements to iterate over. So for an array_list of block_pos, whether every block_pos has been looped over.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "iterator",
					"type": "id"
				}
			]
		},
		"iteration": {
			"description": "Gets the current element from the iterator. So for an array_list of block_pos, this returns the current loop's block_pos. If the iterator has keys, like a hash_set, pass the entry id this iteration() function returns to entry_key() and entry_value().",
			"return_type": "id",
			"arguments": [
				{
					"name": "iterator",
					"type": "id"
				}
			]
		},
		"iterator": {
			"description": "Creates a new iterator. Used to loop over something that is iterable, like an array_list, or a hash_set.",
			"return_type": "id",
			"arguments": [
				{
					"name": "iterable",
					"type": "id"
				}
			]
		},
		"iterator_remove": {
			"description": "Removes the element of this iteration from the iterable. This function can only be called once per iteration.",
			"arguments": [
				{
					"name": "iterator",
					"type": "id"
				}
			]
		},
		"place_block": {
			"description": "Places a block.",
			"arguments": [
				{
					"name": "block_state",
					"type": "id"
				},
				{
					"name": "block_pos",
					"type": "id"
				},
				{
					"name": "flags",
					"type": "i32"
				},
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"print_bool": {
			"description": "Prints a bool to the chat.",
			"arguments": [
				{
					"name": "b",
					"type": "bool"
				}
			]
		},
		"print_f32": {
			"description": "Prints an f32 to the chat.",
			"arguments": [
				{
					"name": "f",
					"type": "f32"
				}
			]
		},
		"print_i32": {
			"description": "Prints an i32 to the chat.",
			"arguments": [
				{
					"name": "n",
					"type": "i32"
				}
			]
		},
		"print_id": {
			"description": "Prints an ID to the chat.",
			"arguments": [
				{
					"name": "id",
					"type": "id"
				}
			]
		},
		"print_string": {
			"description": "Prints a string to the chat.",
			"arguments": [
				{
					"name": "str",
					"type": "string"
				}
			]
		},
		"remove_block": {
			"description": "Removes a block.",
			"arguments": [
				{
					"name": "block_pos",
					"type": "id"
				},
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"remove_moving_block": {
			"description": "Removes a moving block.",
			"arguments": [
				{
					"name": "block_pos",
					"type": "id"
				},
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"resource_location": {
			"description": "Creates a new resource_location.",
			"return_type": "id",
			"arguments": [
				{
					"name": "resource_location_string",
					"type": "string"
				}
			]
		},
		"set_entity_delta_movement": {
			"description": "Sets an entity's delta movement.",
			"arguments": [
				{
					"name": "entity",
					"type": "id"
				},
				{
					"name": "vec3",
					"type": "id"
				}
			]
		},
		"spawn_entity": {
			"description": "Spawns a new entity.",
			"arguments": [
				{
					"name": "entity",
					"type": "id"
				},
				{
					"name": "level",
					"type": "id"
				}
			]
		},
		"unbox_i32": {
			"description": "Unwraps an i32 object created by box_i32(), and returns the i32 that it wrapped.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "box",
					"type": "id"
				}
			]
		},
		"vec3_zero": {
			"description": "Creates a new vec3, initialized with all zeros.",
			"return_type": "id"
		}
	}
}
