{
	"entities": {
		"Block": {
			"description": "A block."
		},
		"BlockEntity": {
			"description": "A block entity.",
            "on_functions": {
                "on_spawn": {
                    "description": "Called when the block gets placed."
                },
                "on_tick": {
                    "description": "Called every game tick, so every 0.05 seconds."
                },
                "on_neighbor_changed": {
                    "description": "Called when a neighboring block changed. An example is when a neighboring lever is toggled between the on and off state.",
					"arguments": [
						{
							"name": "block_state",
							"type": "BlockState"
						},
						{
							"name": "level",
							"type": "Level"
						},
						{
							"name": "block_pos",
							"type": "BlockPos"
						},
						{
							"name": "block_in",
							"type": "Block"
						},
						{
							"name": "from_block_pos",
							"type": "BlockPos"
						},
						{
							"name": "is_moving",
							"type": "bool"
						}
					]
                }
            }
		}
	},
	"game_functions": {
		"block": {
			"description": "Creates a new Block.",
			"return_type": "Block",
			"arguments": [
				{
					"name": "resource_location",
					"type": "ResourceLocation"
				}
			]
		},
		"block_pos": {
			"description": "Creates a new BlockPos.",
			"return_type": "BlockPos",
			"arguments": [
				{
					"name": "x",
					"type": "i32"
				},
				{
					"name": "y",
					"type": "i32"
				},
				{
					"name": "z",
					"type": "i32"
				}
			]
		},
		"block_flag_update_all": {
			"description": "Passed to game functions like place_block(), to notify all neighboring blocks. Consider using one of the other flags that won't cause as much lag.",
			"return_type": "i32"
		},
		"box_i32": {
			"description": "Wraps an i32 in a BoxedI32 object, and returns it. Use this if you need to store i32s in for example a HashSet.",
			"return_type": "BoxedI32",
			"arguments": [
				{
					"name": "i32",
					"type": "i32"
				}
			]
		},
		"destroy_and_drop_block": {
			"description": "Removes a block, and drops it as an item. Spawns particles of the removed block.",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				},
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"destroy_block": {
			"description": "Removes a block, without dropping it as an item. Spawns particles of the removed block.",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				},
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"entry_key": {
			"description": "Gets the key of the current Iteration entry, gotten by calling iteration(). So for a HashMap of BlockPos, this returns the current loop's key.",
			"return_type": "id",
			"arguments": [
				{
					"name": "entry",
					"type": "Iteration"
				}
			]
		},
		"entry_set_value": {
			"description": "Sets the value of an Iteration entry. This function can't be called after iterator_remove().",
			"arguments": [
				{
					"name": "entry",
					"type": "Iteration"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"entry_value": {
			"description": "Gets the value of the current Iteration entry, gotten by calling iteration(). So for a HashMap of BlockPos, this returns the current loop's value.",
			"return_type": "id",
			"arguments": [
				{
					"name": "entry",
					"type": "Iteration"
				}
			]
		},
		"get_block_entity_level": {
			"description": "Gets the Level (dimension) a BlockEntity is in.",
			"return_type": "Level",
			"arguments": [
				{
					"name": "block_entity",
					"type": "BlockEntity"
				}
			]
		},
		"get_block_pos_above": {
			"description": "Gets the BlockPosition one block up.",
			"return_type": "BlockPos",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				}
			]
		},
		"get_block_pos_above_n": {
			"description": "Gets the BlockPosition N blocks up.",
			"return_type": "BlockPos",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				},
				{
					"name": "n",
					"type": "i32"
				}
			]
		},
		"get_block_pos_center": {
			"description": "Gets the center of a BlockPosition.",
			"return_type": "Vec3",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				}
			]
		},
		"get_block_pos_of_block_entity": {
			"description": "Gets the world position of a BlockEntity.",
			"return_type": "BlockPos",
			"arguments": [
				{
					"name": "block_entity",
					"type": "BlockEntity"
				}
			]
		},
		"get_block_pos_x": {
			"description": "Gets the X coordinate of a BlockPos.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				}
			]
		},
		"get_block_pos_y": {
			"description": "Gets the Y coordinate of a BlockPos.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				}
			]
		},
		"get_block_pos_z": {
			"description": "Gets the Z coordinate of a BlockPos.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				}
			]
		},
		"get_block_state": {
			"description": "Gets a BlockPos its state.",
			"return_type": "BlockPosState",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				},
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"get_default_block_state": {
			"description": "Gets the default BlockState of a block.",
			"return_type": "BlockState",
			"arguments": [
				{
					"name": "block",
					"type": "Block"
				}
			]
		},
		"get_hash_map_size": {
			"description": "Returns the number of ids in the HashMap.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				}
			]
		},
		"get_hash_map_string": {
			"description": "Returns the string representation of the HashMap.",
			"return_type": "string",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				}
			]
		},
		"get_hash_set_size": {
			"description": "Returns the number of ids in the HashSet.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "hash_set",
					"type": "HashSet"
				}
			]
		},
		"get_hash_set_string": {
			"description": "Returns the string representation of the HashSet.",
			"return_type": "string",
			"arguments": [
				{
					"name": "hash_set",
					"type": "HashSet"
				}
			]
		},
		"get_item_name": {
			"description": "Gets the name of an item.",
			"return_type": "string",
			"arguments": [
				{
					"name": "item",
					"type": "Item"
				}
			]
		},
		"get_item_entity_name": {
			"description": "Gets the name of an ItemEntity.",
			"return_type": "string",
			"arguments": [
				{
					"name": "item_entity",
					"type": "ItemEntity"
				}
			]
		},
		"get_item_stack_name": {
			"description": "Gets the name of an ItemStack.",
			"return_type": "string",
			"arguments": [
				{
					"name": "item_stack",
					"type": "ItemStack"
				}
			]
		},
		"get_level_name": {
			"description": "Gets the name of a Level (dimension).",
			"return_type": "string",
			"arguments": [
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"get_resource_location_string": {
			"description": "Gets a ResourceLocation as a string.",
			"return_type": "string",
			"arguments": [
				{
					"name": "resource_location",
					"type": "ResourceLocation"
				}
			]
		},
		"get_vec3_x": {
			"description": "Gets the X coordinate of a Vec3.",
			"return_type": "f32",
			"arguments": [
				{
					"name": "vec3",
					"type": "Vec3"
				}
			]
		},
		"get_vec3_y": {
			"description": "Gets the Y coordinate of a Vec3.",
			"return_type": "f32",
			"arguments": [
				{
					"name": "vec3",
					"type": "Vec3"
				}
			]
		},
		"get_vec3_z": {
			"description": "Gets the Z coordinate of a Vec3.",
			"return_type": "f32",
			"arguments": [
				{
					"name": "vec3",
					"type": "Vec3"
				}
			]
		},
		"hash_map": {
			"description": "Creates a new HashMap, containing id keys and id values.",
			"return_type": "HashMap"
		},
		"hash_map_clear": {
			"description": "Clears the HashMap.",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				}
			]
		},
		"hash_map_copy": {
			"description": "Copies the contents of one HashMap to another.",
			"arguments": [
				{
					"name": "hash_map_from",
					"type": "HashMap"
				},
				{
					"name": "hash_map_to",
					"type": "HashMap"
				}
			]
		},
		"hash_map_get": {
			"description": "Returns the value that is associated with a key in the HashMap.",
			"return_type": "id",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				},
				{
					"name": "key",
					"type": "id"
				}
			]
		},
		"hash_map_has_key": {
			"description": "Returns whether the HashMap contains a specific key.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				},
				{
					"name": "key",
					"type": "id"
				}
			]
		},
		"hash_map_put": {
			"description": "Assigns a value to a key in the HashMap.",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				},
				{
					"name": "key",
					"type": "id"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"hash_map_remove_key": {
			"description": "Removes a key from the HashMap, if the id is in there.",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				},
				{
					"name": "key",
					"type": "id"
				}
			]
		},
		"hash_set": {
			"description": "Creates a new HashSet of ids.",
			"return_type": "HashSet"
		},
		"hash_set_add": {
			"description": "Adds an id to the HashSet, if the id is not already in there.",
			"arguments": [
				{
					"name": "hash_set",
					"type": "HashSet"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"hash_set_clear": {
			"description": "Clears the HashSet.",
			"arguments": [
				{
					"name": "hash_set",
					"type": "HashSet"
				}
			]
		},
		"hash_set_copy": {
			"description": "Copies the contents of one HashSet to another.",
			"arguments": [
				{
					"name": "hash_set_from",
					"type": "HashSet"
				},
				{
					"name": "hash_set_to",
					"type": "HashSet"
				}
			]
		},
		"hash_set_has": {
			"description": "Returns whether the HashSet contains a specific id.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "hash_set",
					"type": "HashSet"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"hash_set_remove": {
			"description": "Removes an id from the HashSet, if the id is in there.",
			"arguments": [
				{
					"name": "hash_set",
					"type": "HashSet"
				},
				{
					"name": "value",
					"type": "id"
				}
			]
		},
		"id_to_block_pos": {
			"description": "Asserts that id is a BlockPos, and then returns it as a BlockPos. If it is not a BoxedI32, it raises an error.",
			"return_type": "BlockPos",
			"arguments": [
				{
					"name": "id",
					"type": "id"
				}
			]
		},
		"id_to_boxed_i32": {
			"description": "Asserts that id is a BoxedI32, and then returns it as a BoxedI32. If it is not a BoxedI32, it raises an error.",
			"return_type": "BoxedI32",
			"arguments": [
				{
					"name": "id",
					"type": "id"
				}
			]
		},
		"is_air": {
			"description": "Returns whether the BlockState is air.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "block_state",
					"type": "BlockState"
				}
			]
		},
		"is_client_side": {
			"description": "Returns whether the code is being run on the client-side.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"item": {
			"description": "Creates a new item.",
			"return_type": "Item",
			"arguments": [
				{
					"name": "resource_location",
					"type": "ResourceLocation"
				}
			]
		},
		"item_entity": {
			"description": "Creates a new ItemEntity.",
			"return_type": "ItemEntity",
			"arguments": [
				{
					"name": "level",
					"type": "Level"
				},
				{
					"name": "x",
					"type": "f32"
				},
				{
					"name": "y",
					"type": "f32"
				},
				{
					"name": "z",
					"type": "f32"
				},
				{
					"name": "item_stack",
					"type": "ItemStack"
				}
			]
		},
		"item_entity_to_entity": {
			"description": "Takes an ItemEntity, and returns it as an Entity.",
			"return_type": "Entity",
			"arguments": [
				{
					"name": "item_entity",
					"type": "ItemEntity"
				}
			]
		},
		"item_stack": {
			"description": "Creates a new ItemStack. Keep in mind that when two ItemStacks get close enough to each other, they merge, turning the original ItemStacks and entities into 'Air'. So if you call SpawnEntity() to spawn an ItemStack, make sure that the ItemStack isn't reused later on to spawn more entities.",
			"return_type": "ItemStack",
			"arguments": [
				{
					"name": "item",
					"type": "Item"
				}
			]
		},
		"iterating": {
			"description": "Returns whether the Iterator has more elements to iterate over. So for a HashSet of BlockPos, whether every BlockPos has been looped over.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "iterator",
					"type": "Iterator"
				}
			]
		},
		"iteration": {
			"description": "Gets the current element from the Iterator. So for a HashSet of BlockPos, this returns the current loop's BlockPos. If the Iterator has keys, like a HashMap, pass the Iteration entry this function returns to entry_key() and entry_value().",
			"return_type": "Iteration",
			"arguments": [
				{
					"name": "iterator",
					"type": "Iterator"
				}
			]
		},
		"iterator_hash_map": {
			"description": "Creates a new Iterator for a HashMap.",
			"return_type": "Iterator",
			"arguments": [
				{
					"name": "hash_map",
					"type": "HashMap"
				}
			]
		},
		"iterator_hash_set": {
			"description": "Creates a new Iterator for a HashSet.",
			"return_type": "Iterator",
			"arguments": [
				{
					"name": "hash_set",
					"type": "HashSet"
				}
			]
		},
		"iterator_remove": {
			"description": "Removes the element of the current iteration from the iterable. This function can only be called once per iteration.",
			"arguments": [
				{
					"name": "iterator",
					"type": "Iterator"
				}
			]
		},
		"place_block": {
			"description": "Places a block.",
			"arguments": [
				{
					"name": "block_state",
					"type": "BlockState"
				},
				{
					"name": "block_pos",
					"type": "BlockPos"
				},
				{
					"name": "flags",
					"type": "i32"
				},
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"print_bool": {
			"description": "Prints a bool to the chat.",
			"arguments": [
				{
					"name": "b",
					"type": "bool"
				}
			]
		},
		"print_f32": {
			"description": "Prints an f32 to the chat.",
			"arguments": [
				{
					"name": "f",
					"type": "f32"
				}
			]
		},
		"print_i32": {
			"description": "Prints an i32 to the chat.",
			"arguments": [
				{
					"name": "n",
					"type": "i32"
				}
			]
		},
		"print_id": {
			"description": "Prints an ID to the chat.",
			"arguments": [
				{
					"name": "id",
					"type": "id"
				}
			]
		},
		"print_string": {
			"description": "Prints a string to the chat.",
			"arguments": [
				{
					"name": "str",
					"type": "string"
				}
			]
		},
		"remove_block": {
			"description": "Removes a block, without dropping it as an item.",
			"arguments": [
				{
					"name": "block_pos",
					"type": "BlockPos"
				},
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"resource_location": {
			"description": "Creates a new ResourceLocation.",
			"return_type": "ResourceLocation",
			"arguments": [
				{
					"name": "resource_location_string",
					"type": "string"
				}
			]
		},
		"set_entity_delta_movement": {
			"description": "Sets an Entity's delta movement.",
			"arguments": [
				{
					"name": "entity",
					"type": "Entity"
				},
				{
					"name": "vec3",
					"type": "Vec3"
				}
			]
		},
		"spawn_entity": {
			"description": "Spawns a new entity. Spawning the same entity twice is an error.",
			"arguments": [
				{
					"name": "entity",
					"type": "Entity"
				},
				{
					"name": "level",
					"type": "Level"
				}
			]
		},
		"unbox_i32": {
			"description": "Unwraps a BoxedI32 object created by box_i32(), and returns the i32 that it wrapped.",
			"return_type": "i32",
			"arguments": [
				{
					"name": "boxed_i32",
					"type": "BoxedI32"
				}
			]
		},
		"vec3": {
			"description": "Creates a new Vec3.",
			"return_type": "Vec3",
			"arguments": [
				{
					"name": "x",
					"type": "f32"
				},
				{
					"name": "y",
					"type": "f32"
				},
				{
					"name": "z",
					"type": "f32"
				}
			]
		},
		"vec3_zero": {
			"description": "Creates a new Vec3, initialized with all zeros.",
			"return_type": "Vec3"
		}
	}
}
